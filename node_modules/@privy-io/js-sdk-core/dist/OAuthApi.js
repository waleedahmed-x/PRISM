import{OAuthInit as t,OAuthAuthenticate as e,OAuthLink as r,OAuthUnlink as i}from"@privy-io/public-api";import{PrivyClientError as s}from"./Error.js";import{createCodeVerifier as o,createStateCode as a,deriveCodeChallengeFromCodeVerifier as n,CODE_VERIFIER_KEY as h,STATE_CODE_KEY as _}from"./pkce.js";import"jose";class c{_privyInternal;_storage;_crypto;constructor(t,e,r){this._privyInternal=t,this._storage=e,this._crypto=r}async generateURL(e,r){const i=o(),s=a(),c=await n({codeVerifier:i,digest:this._crypto?.digest});return await Promise.all([this._storage.put(h,i),this._storage.put(_,s)]),this._privyInternal.fetch(t,{body:{redirect_to:r,provider:e,code_challenge:c,state_code:s}})}async loginWithCode(t,r,i,o,a){const[n,c]=await Promise.all([this._storage.get(h),this._storage.get(_)]);if(c!==r)throw this._privyInternal.createAnalyticsEvent("possible_phishing_attempt",{flow:"oauth",provider:i,storedStateCode:c??"",returnedStateCode:r??""}),new s({code:"pkce_state_code_mismatch",error:"Unexpected auth flow. This may be a phishing attempt."});const l=await this._privyInternal.fetch(e,{body:{authorization_code:t,code_type:o,state_code:c,code_verifier:n,mode:a}});return await Promise.all([this._privyInternal.session.storeToken(l.token),this._privyInternal.session.storeRefreshToken(l.refresh_token),this._privyInternal.session.storeIdentityToken(l.identity_token)]),this._privyInternal.callbacks?.setUser?.(l.user),await Promise.all([this._storage.del(h),this._storage.del(_)]),l}async linkWithCode(t,e,i,o){const[a,n]=await Promise.all([this._storage.get(h),this._storage.get(_)]);if(n!==e)throw this._privyInternal.createAnalyticsEvent("possible_phishing_attempt",{flow:"oauth",provider:i,storedStateCode:n??"",returnedStateCode:e??""}),new s({code:"pkce_state_code_mismatch",error:"Unexpected auth flow. This may be a phishing attempt."});await this._privyInternal.fetch(r,{body:{authorization_code:t,code_type:o,state_code:n,code_verifier:a}});const c=await this._privyInternal.refreshSession();return await Promise.all([this._storage.del(h),this._storage.del(_)]),c.user}async unlink(t,e){await this._privyInternal.fetch(i,{body:{provider:t,subject:e}});return(await this._privyInternal.refreshSession()).user}}export{c as default};
//# sourceMappingURL=OAuthApi.js.map
