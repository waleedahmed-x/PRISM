import{RecoveryOAuthInit as t,RecoveryOAuthAuthenticate as e}from"@privy-io/public-api";import{PrivyClientError as r}from"./Error.js";import{createCodeVerifier as o,createStateCode as i,deriveCodeChallengeFromCodeVerifier as a,CODE_VERIFIER_KEY as s,STATE_CODE_KEY as c}from"./pkce.js";import"jose";class n{_privyInternal;_storage;_crypto;constructor(t,e,r){this._privyInternal=t,this._storage=e,this._crypto=r}async generateURL(e){const r=o(),n=i(),_=await a({codeVerifier:r,digest:this._crypto?.digest});return await Promise.all([this._storage.put(s,r),this._storage.put(c,n)]),this._privyInternal.fetch(t,{body:{redirect_to:e,code_challenge:_,state_code:n}})}async authorize(t,o){const[i,a]=await Promise.all([this._storage.get(s),this._storage.get(c)]);if(a!==o)throw this._privyInternal.createAnalyticsEvent("possible_phishing_attempt",{flow:"recovery_oauth",storedStateCode:a??"",returnedStateCode:o??""}),new r({code:"pkce_state_code_mismatch",error:"Unexpected auth flow. This may be a phishing attempt."});const n=await this._privyInternal.fetch(e,{body:{authorization_code:t,state_code:a,code_verifier:i}});return await Promise.all([this._storage.del(s),this._storage.del(c)]),n}}export{n as default};
//# sourceMappingURL=RecoveryOAuthApi.js.map
