import e from"eventemitter3";import t from"js-cookie";import{Token as r}from"./Token.js";import"jose";const s="privy:token",o="privy-token",i="privy:refresh_token",n="privy-refresh-token",a="privy:id-token",c="privy-id-token",_="privy-session",g="privy:session_transfer_token",l=["storage_cleared","token_cleared","refresh_token_cleared","identity_token_cleared","forked_token_cleared","token_stored","refresh_token_stored","identity_token_stored"];class h extends e{static events=l;_storage;_isUsingServerCookies=!1;constructor(e){super(),this._storage=e.storage}set isUsingServerCookies(e){this._isUsingServerCookies=e}async getToken(){const e=await this._storage.get(s);try{return"string"==typeof e?new r(e).value:null}catch(e){return console.error(e),await this.destroyLocalState({reason:"getToken_error"}),null}}async getRefreshToken(){try{const e=await this._storage.get(i);return"string"==typeof e?e:null}catch(e){return console.error(e),await this.destroyLocalState({reason:"getRefreshToken_error"}),null}}async getIdentityToken(){try{const e=await this._storage.get(a);return"string"==typeof e?e:null}catch(e){return console.error(e),await this.destroyLocalState({reason:"getIdentityToken_error"}),null}}async getForkedToken(){try{const e=await this._storage.get(g);return"string"==typeof e?e:null}catch(e){return console.error(e),await this.destroyLocalState({reason:"getForkedToken_error"}),null}}get mightHaveServerCookies(){try{const e=t.get(_);return void 0!==e&&e.length>0}catch(e){console.error(e)}return!1}hasRefreshCredentials(e,t){return this.mightHaveServerCookies||"string"==typeof e&&"string"==typeof t}async hasRecoveryCredentials(){return"string"==typeof await this.getForkedToken()}tokenIsActive(e){if(!e)return!1;const t=r.parse(e);return null!==t&&!t.isExpired(30)}async destroyLocalState(e){const t=await Promise.all([this._storage.del(s),this._storage.del(i),this._storage.del(a),this.clearForkedToken()]);return e?.reason&&this.emit("storage_cleared",{reason:e.reason}),t}async storeToken(e){if("string"==typeof e){const i=await this._storage.get(s);if(await this._storage.put(s,e),!this._isUsingServerCookies){const s=r.parse(e)?.expiration;t.set(o,e,{sameSite:"Strict",secure:!0,expires:s?new Date(1e3*s):void 0})}i!==e&&this.emit("token_stored",{cookiesEnabled:this._isUsingServerCookies})}else{const e=await this._storage.get(s);await this._storage.del(s),t.remove(o),null!==e&&this.emit("token_cleared",{reason:"set_with_non_string_value"})}}async storeRefreshToken(e){"string"==typeof e?(await this._storage.put(i,e),this._isUsingServerCookies||(t.set(_,"t",{sameSite:"Strict",secure:!0,expires:30}),t.set(n,e,{sameSite:"Strict",secure:!0,expires:30})),this.emit("refresh_token_stored",{cookiesEnabled:this._isUsingServerCookies})):(await this._storage.del(i),t.remove(n),t.remove(_),this.emit("refresh_token_cleared",{reason:"set_with_non_string_value"}))}async storeIdentityToken(e){if("string"==typeof e){const s=await this._storage.get(a);if(await this._storage.put(a,e),!this._isUsingServerCookies){const s=r.parse(e)?.expiration;t.set(c,e,{sameSite:"Strict",secure:!0,expires:s?new Date(1e3*s):void 0})}s!==e&&this.emit("identity_token_stored",{cookiesEnabled:this._isUsingServerCookies})}else{const e=await this._storage.get(a);await this._storage.del(a),t.remove(c),null!==e&&this.emit("identity_token_cleared",{reason:"set_with_non_string_value"})}}async clearForkedToken(){await this._storage.del(g)}}export{h as Session};
//# sourceMappingURL=Session.js.map
