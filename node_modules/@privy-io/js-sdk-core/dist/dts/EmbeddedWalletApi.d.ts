import type { PrivyEthereumEmbeddedWalletAccount, PrivySolanaEmbeddedWalletAccount, PrivyUser } from '@privy-io/public-api/schemas';
import { EmbeddedSolanaWalletProvider, EmbeddedWalletProvider } from './embedded';
import type { IEmbeddedWalletRecoveryOptions, PrivyResponseEvent, SetRecoveryInput } from './embedded/types';
/** Options for creating the Solana embedded wallet */
type CreateSolanaOpts = {
    /**
     * The user's existing Ethereum embedded wallet if they have one. This parameter
     * MUST be set if the user has an Ethereum embedded wallet, otherwise Solana creation
     * will fail in the iframe.
     */
    ethereumAccount?: PrivyEthereumEmbeddedWalletAccount;
};
export default class EmbeddedWalletApi {
    /**
     * Creates an embedded wallet
     *
     * @param password Recovery password for the embedded wallet
     * @returns EmbeddedWalletProvider implementing EIP1193Provider
     */
    create(password?: string, recoveryMethod?: IEmbeddedWalletRecoveryOptions, recoveryToken?: string, recoverySecretOverride?: string, iCloudRecordNameOverride?: string): Promise<{
        user: PrivyUser;
        provider: EmbeddedWalletProvider;
    }>;
    /**
     * Creates an embedded Solana wallet
     *
     * @param opts.ethereumAccount {PrivyEthereumEmbeddedWalletAccount} the user's existing embedded wallet account if they have one. This parameter
     * MUST be passed if the user has an existing Ethereum embedded wallet otherwise Solana wallet creation will fail.
     * @returns EmbeddedWalletProvider implementing Phantom Provider
     */
    createSolana(opts?: CreateSolanaOpts): Promise<EmbeddedSolanaWalletProvider>;
    hasEmbeddedWallet(): Promise<boolean>;
    isPasswordRequired(): Promise<boolean>;
    /**
     * Retrieve this users embedded wallet.
     * If the wallet has never been used on this device recover.
     *
     * @param password Recovery password for the embedded wallet
     * @returns EmbeddedWalletProvider implementing EIP1193Provider
     */
    getProvider(wallet: PrivyEthereumEmbeddedWalletAccount, password?: string, recoveryToken?: string, recoverySecretOverride?: string): Promise<EmbeddedWalletProvider>;
    /**
     * Retrieve this users embedded Solana wallet.
     * If the wallet has never been used on this device recover.
     *
     * @returns EmbeddedSolanaWalletProvider
     */
    getSolanaProvider(wallet: PrivySolanaEmbeddedWalletAccount): Promise<EmbeddedSolanaWalletProvider>;
    /**
     * @deprecated Use `setRecovery` instead.
     *
     * Add or change the password used to recover an embedded wallet.
     *
     * @param password New recovery password
     * @param currentPassword Current recovery password used to recover the embedded wallet
     * @returns EmbeddedWalletProvider implementing EIP1193Provider
     */
    setPassword(wallet: PrivyEthereumEmbeddedWalletAccount, password: string): Promise<EmbeddedWalletProvider>;
    /**
     * Add or change the recovery method used to recover an embedded wallet.
     *
     * @param password New recovery password
     * @param currentPassword Current recovery password used to recover the embedded wallet
     * @returns EmbeddedWalletProvider implementing EIP1193Provider
     */
    setRecovery({ wallet, ...recoveryArgs }: SetRecoveryInput): Promise<{
        user: PrivyUser;
        provider: EmbeddedWalletProvider;
    }>;
    /**
     * @returns URL to load in the embedded wallet iframe
     */
    getURL(): string;
    /**
     * @deprecated Use `onMessage` instead
     *
     * @returns Allows the user to subscribe
     * to the response events from the embedded wallet iframe
     *
     * @example
     * const handler = privy.wallet.getMessageHandler()
     * window.addEventListener('message', handler)
     */
    getMessageHandler(): (event: PrivyResponseEvent) => void;
    /**
     * Handles messages from the embedded wallet secure contexts
     *
     * @example
     * const onMessage = async (e: WebViewMessageEvent) => {
     *   const {data} = e.nativeEvent;
     *   client.embeddedWallet.onMessage(JSON.parse(data));
     * }
     */
    onMessage(event: PrivyResponseEvent): void;
    /**
     * Retrieve this users embedded Solana wallet.
     * If the wallet has never been used on this device recover.
     *
     * @returns EmbeddedSolanaWalletProvider
     */
    _loadSolana(wallet: PrivySolanaEmbeddedWalletAccount): Promise<string>;
}
export {};
