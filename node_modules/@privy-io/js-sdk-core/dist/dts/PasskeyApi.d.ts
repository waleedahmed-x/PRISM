import type { AuthenticationResponseJSON, RegistrationResponseJSON } from '@simplewebauthn/types';
import type { PrivyAuthenticatedUser, PrivyUser } from '@privy-io/public-api';
export default class PasskeyApi {
    /**
     * Begin a link flow with a passkey.
     */
    generateRegistrationOptions(relyingParty?: string): Promise<{
        options: {
            challenge: string;
            rp: {
                name: string;
                id?: string | undefined;
            };
            user: {
                id: string;
                name: string;
                display_name: string;
            };
            pub_key_cred_params: {
                type: "public-key";
                alg: number;
            }[];
            timeout?: number | undefined;
            extensions?: {
                app_id?: string | undefined;
                cred_props?: {
                    rk?: boolean | undefined;
                } | undefined;
                hmac_create_secret?: boolean | undefined;
            } | undefined;
            exclude_credentials?: {
                type: string;
                id: string;
                transports?: string[] | undefined;
            }[] | undefined;
            authenticator_selection?: {
                user_verification?: string | undefined;
                authenticator_attachment?: string | undefined;
                require_resident_key?: boolean | undefined;
                resident_key?: string | undefined;
            } | undefined;
            attestation?: string | undefined;
        };
        relying_party?: string | undefined;
    }>;
    /**
     * Begin a login flow with a passkey.
     */
    generateAuthenticationOptions(relyingParty?: string): Promise<{
        options: {
            challenge: string;
            timeout?: number | undefined;
            rp_id?: string | undefined;
            allow_credentials?: {
                type: string;
                id: string;
                transports?: string[] | undefined;
            }[] | undefined;
            user_verification?: string | undefined;
            extensions?: {
                app_id?: string | undefined;
                cred_props?: boolean | undefined;
                hmac_create_secret?: boolean | undefined;
            } | undefined;
        };
        relying_party?: string | undefined;
    }>;
    /**
     * Log a user in via a passkey.
     *
     * Does _NOT_ create a new passkey account for the current user.
     */
    loginWithPasskey(input: AuthenticationResponseJSON, challenge: string, relyingParty?: string): Promise<PrivyAuthenticatedUser>;
    /**
     * Links a passkey to an existing user.
     *
     * Creates a new passkey account for the current user.
     */
    linkWithPasskey(input: RegistrationResponseJSON, relyingParty?: string): Promise<PrivyUser>;
}
