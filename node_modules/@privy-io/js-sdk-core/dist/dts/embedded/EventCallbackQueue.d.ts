import type { PrivyResponseCallbacksType, IframeReadyResponseCallbacksType, WalletCreateResponseCallbacksType, WalletConnectResponseCallbacksType, WalletRecoverResponseCallbacksType, WalletRpcResponseCallbacksType, WalletSetRecoveryResponseCallbacksType, SolanaWalletCreateResponseCallbacksType, SolanaWalletConnectResponseCallbacksType, SolanaWalletRecoverResponseCallbacksType, SolanaWalletRpcResponseCallbacksType } from './types';
/**
 * This class helps keep track of callbacks that are created when sending
 * an event to the iframe. When the iframe sends a response back, we'll
 * look up the callbacks enqueued during the request using the event id
 * in the response.
 *
 * The callbacks themselves should be the `resolve` and `reject` functions given
 * to us when creating a new promise that captures remote calls to the iframe.
 *
 * @private
 */
export declare class EventCallbacksQueue {
    private callbacks;
    enqueue(eventId: string, callbacks: PrivyResponseCallbacksType): void;
    dequeue(event: 'privy:iframe:ready', eventId: string): IframeReadyResponseCallbacksType;
    dequeue(event: 'privy:wallet:create', eventId: string): WalletCreateResponseCallbacksType;
    dequeue(event: 'privy:wallet:connect', eventId: string): WalletConnectResponseCallbacksType;
    dequeue(event: 'privy:wallet:recover', eventId: string): WalletRecoverResponseCallbacksType;
    dequeue(event: 'privy:wallet:set-recovery', eventId: string): WalletSetRecoveryResponseCallbacksType;
    dequeue(event: 'privy:wallet:rpc', eventId: string): WalletRpcResponseCallbacksType;
    dequeue(event: 'privy:solana-wallet:create', eventId: string): SolanaWalletCreateResponseCallbacksType;
    dequeue(event: 'privy:solana-wallet:connect', eventId: string): SolanaWalletConnectResponseCallbacksType;
    dequeue(event: 'privy:solana-wallet:recover', eventId: string): SolanaWalletRecoverResponseCallbacksType;
    dequeue(event: 'privy:solana-wallet:rpc', eventId: string): SolanaWalletRpcResponseCallbacksType;
}
