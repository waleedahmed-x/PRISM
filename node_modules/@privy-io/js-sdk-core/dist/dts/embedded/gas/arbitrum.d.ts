import type { StaticJsonRpcProvider } from '@ethersproject/providers';
import type { UnsignedTransactionRequestWithChainId } from '../types';
/**
 * Check if the chain ID is for an arbitrum chain
 * @param chainId the chain ID of the network you'd like to check
 * @returns whether the provided chain ID is an arbitrum chain
 */
export declare const isArbitrum: (chainId: number) => boolean;
/**
 * Defaults the `maxFeePerGas` for an Arbitrum transaction if not already set.
 * Arbitrum is an EIP-1559 chain but requires developers to only specify the max fee, not the
 * max priority fee: https://docs.arbitrum.io/learn-more/faq#do-i-need-to-pay-a-tip--priority-fee-for-my-arbitrum-transactions
 *
 * We default the `maxFeePerGas` by taking the base fee from the previous block and multiplying it
 * by 120% to account for increased network activity. This is consistent with MetaMask's "medium"
 * fees: https://github.com/MetaMask/core/blob/b1946ebf6d91a08773d8e98436813987836f67f0/packages/gas-fee-controller/src/fetchGasEstimatesViaEthFeeHistory/calculateGasFeeEstimatesForPriorityLevels.ts#L27
 *
 * Pre-condition: `from`, `to`, `nonce`, and `gasLimit` are already set
 *
 * Post-conditions:
 * - An undefined `type` gets defaulted to 2.
 * - We will default `maxFeePerGas` if it is not set by the developer. This should guarantee that type 2
 *   transactions go through, and seems to work for type 0, 1 in practice.
 * - We default `maxPriorityFeePerGas` to 0 if it is not set  as this gets ignored on Arbitrum.
 * - We do not default `gasPrice` as that is a legacy parameter for type 0, 1 transactions only. If developer
 *   need this transaction type (edge case for Arbitrum), they should set the `gasPrice` themselves.
 *
 * @param txRequest {UnsignedTransactionRequestWithChainId}
 * @returns UnsignedTransactionRequestWithChainId with gas fees defaulted
 */
export declare const defaultGasForArbitrum: (txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider) => Promise<UnsignedTransactionRequestWithChainId>;
