import type { StaticJsonRpcProvider } from '@ethersproject/providers';
import type { UnsignedTransactionRequestWithChainId } from '../types';
/**
 * Check if the chain ID is for a BSC chain
 * @param chainId the chain ID of the network you'd like to check
 * @returns whether the provided chain ID is a BSC chain
 */
export declare const isBsc: (chainId: number) => boolean;
/**
 * Defaults the `gasPrice` for a BSC transaction. BSC does not support EIP-1559 transactions, so
 * we must set a `gasPrice` instead of a `maxPriorityFeePerGas` / `maxBaseFeePerGas`.
 *
 * We default the `gasPrice` by making an `eth_getFeeData` RPC to BSC and using the returned `gasPrice.
 *
 * Pre-condition: `from`, `to`, `nonce`, and `gasLimit` are already set
 *
 * Post-conditions:
 * - An undefined `type` gets defaulted to 0.
 * - We will default `gasPrice` if it is not set by the developer.
 * - We will not default `maxPriorityFeePerGas` nor `maxFeePerGas` as BSC does not support EIP-1559 fee markets
 *   so these parameters will get ignored.
 *
 * @param txRequest {UnsignedTransactionRequestWithChainId}
 * @returns UnsignedTransactionRequestWithChainId with gas fees defaulted
 */
export declare const defaultGasForBsc: (txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider) => Promise<UnsignedTransactionRequestWithChainId>;
