import { BigNumber } from '@ethersproject/bignumber';
import type { StaticJsonRpcProvider } from '@ethersproject/providers';
import type { UnsignedTransactionRequestWithChainId } from '../types';
/**
 * In order to calculate the correct Optimism gas cost, we need to make a contract call to their oracle
 */
export declare const OPTIMISM_STACK_GAS_PRICE_ORACLE_ADDRESS = "0x420000000000000000000000000000000000000F";
export declare const OPTIMISM_STACK_GAS_PRICE_ORACLE_ABI: string[];
/**
 * Check if the chain ID is based on the OP stack
 * @param chainId the chain ID of the network you'd like to check
 * @returns whether the provided chain ID is built on the OP stack or not
 */
export declare const isOpStack: (chainId: number) => boolean;
/**
 * Defaults the `maxFeePerGas` and `maxPriorityFeePerGas` for an OP Stack transaction if not already
 * set. OP Stack chains are EIP-1559 chain and require us to set both values. They do also support legacy
 * transactions, in which case we will not default values and require the developer to set it.
 *
 * Pre-condition: `from`, `to`, `nonce`, and `gasLimit` are already set
 *
 * Post-condition: the prepared transaction either has:
 * - `type: 2` with `maxPriorityFeePerGas` and `maxFeePerGas` set
 * - `type: 0, 1` with `gasPrice` set
 *
 * We default the:
 * - `maxPriorityFeePerGas` by making an `eth_maxPriorityFeePerGas` RPC to OP Stack
 * - `maxFeePerGas` by making an `eth_feeData` RPC to get the base fee of the previous block. We then multiply this
 *   by 126% to account for increased network activity: https://docs.alchemy.com/docs/how-to-build-a-gas-fee-estimator-using-eip-1559#relationship-between-gasusedratio-and-basefeepergas
 *
 * @param txRequest {UnsignedTransactionRequestWithChainId}
 * @returns UnsignedTransactionRequestWithChainId with gas fees defaulted
 */
export declare const defaultGasForOpStack: (txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider) => Promise<UnsignedTransactionRequestWithChainId>;
/**
 * Dedicated logic to query an OP stack chain, with a transaction, to determine the estimated L1 fee
 *
 * @param txRequest the transaction to evaluate gas fee for
 * @param provider the provider for the chain to query
 * @returns the estimated L1 gas fee
 */
export declare function estimateOpStackL1Gas(txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider): Promise<BigNumber>;
