import type { UnsignedTransactionRequestWithChainId } from '../types';
/**
 * Helper function to determine if a chain is Polygon, Polygon Mumbai, or Polygon Amoy
 */
export declare const isPolygon: (chainId: number) => boolean;
/**
 * Queries Polygon gas station for current fees and returns them as wei quantities.
 */
export declare const getPolygonGasStationFees: (chainId: number) => Promise<{
    safeLow: {
        maxPriorityFee: string;
        maxFee: string;
    };
    standard: {
        maxPriorityFee: string;
        maxFee: string;
    };
    fast: {
        maxPriorityFee: string;
        maxFee: string;
    };
}>;
/**
 * Defaults the `maxPriorityFeePerGas` and `maxFeePerGas` for a Polygon transaction if not already set.
 * Polygon is an EIP-1559 chain that requires developers to specify both of these parameters.
 *
 * We default these values by querying the Polygon gas station for the current fees, and using their `standard`
 * recommendations.
 *
 * Pre-condition: `from`, `to`, `nonce`, and `gasLimit` are already set
 *
 * Post-conditions:
 * - An undefined `type` gets defaulted to 2.
 * - We will default `maxFeePerGas` and `maxPriorityFeePerGas` if it is not set by the developer. This should
 *   guarantee that type 2  transactions go through, and seems to work for type 0, 1 in practice.
 * - We do not default `gasPrice` as that is a legacy parameter for type 0, 1 transactions only. If developer
 *   need this transaction type (edge case for Polygon), they should set the `gasPrice` themselves.
 *
 * @param txRequest {UnsignedTransactionRequestWithChainId}
 * @returns UnsignedTransactionRequestWithChainId with gas fees defaulted
 */
export declare function defaultGasForPolygon(txRequest: UnsignedTransactionRequestWithChainId): Promise<UnsignedTransactionRequestWithChainId>;
