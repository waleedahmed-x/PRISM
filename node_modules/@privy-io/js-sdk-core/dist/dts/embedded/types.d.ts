/**
 * We support a subset of the provider methods found here:
 *
 *     https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods
 *
 * For now, we're focused on signing-related methods because the iframe (this code)
 * is the only place that has access to the private key and thus is the only one
 * who can create signatures. All other methods do not need the private key and
 * can therefore be implemented by clients of the iframe.
 */
import type { TypedMessage, MessageTypes } from '@metamask/eth-sig-util';
import type { PrivyEthereumEmbeddedWalletAccount } from '@privy-io/public-api';
export declare const SUPPORTED_JSON_RPC_METHODS: readonly ["eth_sign", "eth_populateTransactionRequest", "eth_signTransaction", "personal_sign", "eth_signTypedData_v4"];
export type JsonRpcMethodType = (typeof SUPPORTED_JSON_RPC_METHODS)[number];
export declare const isSupportedRpcMethod: (method: any) => method is JsonRpcMethodType;
export type Quantity = string | number | bigint;
export type UnsignedTransactionRequest = {
    from?: string;
    to?: string;
    nonce?: Quantity;
    gasLimit?: Quantity;
    gasPrice?: Quantity;
    data?: ArrayLike<number> | string;
    value?: Quantity;
    chainId?: number;
    type?: number;
    accessList?: Array<{
        address: string;
        storageKeys: Array<string>;
    }> | Array<[string, Array<string>]> | Record<string, Array<string>>;
    maxPriorityFeePerGas?: Quantity;
    maxFeePerGas?: Quantity;
};
/**
 * {@link UnsignedTransactionRequest} specifies the `chainId` field as optional,
 * which matches ethers, wagmi, and a bunch of other libraries.
 *
 * However, we need the transaction's `chainId` to ensure it does price conversion, quote
 * labeling, etc. importantly.
 *
 * > Note:
 * > If the developer does not set a `chainId` in their `UnsignedTransactionRequest`,
 * > we default to the embedded provider's  current `chainId`
 */
export type UnsignedTransactionRequestWithChainId = UnsignedTransactionRequest & {
    chainId: number;
};
export type TransactionLog = {
    blockNumber: number;
    blockHash: string;
    transactionIndex: number;
    removed: boolean;
    address: string;
    data: string;
    topics: Array<string>;
    transactionHash: string;
    logIndex: number;
};
export type TransactionReceipt = {
    to: string;
    from: string;
    contractAddress: string;
    transactionIndex: number;
    root?: string;
    logs: Array<TransactionLog>;
    logsBloom: string;
    blockHash: string;
    transactionHash: string;
    blockNumber: number;
    confirmations: number;
    byzantium: boolean;
    type: number;
    status?: number;
    gasUsed: string;
    cumulativeGasUsed: string;
    effectiveGasPrice: string;
};
interface BaseRpcRequestType {
    method: JsonRpcMethodType;
}
interface eth_populateTransactionRequest extends BaseRpcRequestType {
    method: 'eth_populateTransactionRequest';
    params: [UnsignedTransactionRequest];
}
interface eth_populateTransactionRequestResponse {
    method: 'eth_populateTransactionRequest';
    data: UnsignedTransactionRequest;
}
interface eth_signTransaction extends BaseRpcRequestType {
    method: 'eth_signTransaction';
    params: [UnsignedTransactionRequest];
}
interface eth_sign extends BaseRpcRequestType {
    method: 'eth_sign';
    params: [address: string, message: string];
}
interface eth_signResponse {
    method: 'eth_sign';
    data: string;
}
interface personal_sign extends BaseRpcRequestType {
    method: 'personal_sign';
    params: [string, string];
}
interface personal_signResponse {
    method: 'personal_sign';
    data: string;
}
interface eth_signTransactionResponse {
    method: 'eth_signTransaction';
    data: string;
}
interface eth_sendTransaction {
    method: 'eth_sendTransaction';
    data: string;
}
interface eth_signTypedData_v4 extends BaseRpcRequestType {
    method: 'eth_signTypedData_v4';
    params: [string, TypedMessage<MessageTypes> | string];
}
interface eth_signTypedData_v4Response {
    method: 'eth_signTypedData_v4';
    data: string;
}
export type RpcRequestType = eth_sendTransaction | eth_signTransaction | eth_populateTransactionRequest | eth_sign | personal_sign | eth_signTypedData_v4;
export type RpcResponseType = eth_signTransactionResponse | eth_populateTransactionRequestResponse | eth_signResponse | personal_signResponse | eth_signTypedData_v4Response;
declare const SUPPORTED_SOLANA_RPC_METHODS: readonly ["signMessage"];
type SolanaRpcMethodType = (typeof SUPPORTED_SOLANA_RPC_METHODS)[number];
export declare const isSupportedSolanaRpcMethod: (method: any) => method is SolanaRpcMethodType;
export interface BaseSolanaRpcRequestType {
    method: SolanaRpcMethodType;
    params: any;
}
export interface SolanaRpcRequestType extends BaseSolanaRpcRequestType {
    method: 'signMessage';
    params: {
        message: string;
    };
}
export interface SolanaRpcResponseType {
    data: {
        signature: string;
    };
}
export type PrivyEventType = 'privy:iframe:ready' | 'privy:wallet:create' | 'privy:wallet:connect' | 'privy:wallet:recover' | 'privy:wallet:rpc' | 'privy:wallet:set-recovery' | 'privy:solana-wallet:create' | 'privy:solana-wallet:connect' | 'privy:solana-wallet:recover' | 'privy:solana-wallet:rpc';
export type IEmbeddedWalletRecoveryOptions = 'privy' | 'user-passcode' | 'google-drive' | 'icloud' | 'icloud-native';
export type IUserRecoveryMethod = 'user-passcode' | 'google-drive' | 'icloud' | 'icloud-native';
export type EmbeddedWalletRecoveryOptions = 'privy' | 'user-passcode' | 'google-drive' | 'icloud';
export type PasswordRecoveryInput = {
    recoveryMethod: 'user-passcode';
    password: string;
};
export type CloudRecoveryInput = {
    recoveryMethod: 'google-drive' | 'icloud';
    recoveryAccessToken: string;
};
export type ICloudNativeRecoveryInput = {
    recoveryMethod: 'icloud-native';
    recoverySecretOverride: string;
    iCloudRecordNameOverride: string;
};
export type SetRecoveryInput = {
    wallet: PrivyEthereumEmbeddedWalletAccount;
} & (PasswordRecoveryInput | CloudRecoveryInput | ICloudNativeRecoveryInput | PrivyRecoveryInput);
export type IframeReadyRequestDataType = Record<string, never>;
export type WalletCreateRequestDataType = {
    accessToken: string;
    recoveryPassword?: string;
    recoveryMethod?: IEmbeddedWalletRecoveryOptions;
    recoveryAccessToken?: string;
    recoverySecretOverride?: string;
    iCloudRecordNameOverride?: string;
};
export type WalletConnectRequestDataType = {
    accessToken: string;
    address: string;
};
export type WalletRecoverRequestDataType = {
    accessToken: string;
    address: string;
    recoveryPassword?: string;
    recoveryMethod?: string;
    recoveryAccessToken?: string;
    recoverySecretOverride?: string;
};
export type WalletSetRecoveryRequestDataType = {
    accessToken: string;
    address: string;
    recoveryMethod: IUserRecoveryMethod;
    recoveryPassword?: string;
    recoveryAccessToken?: string;
    recoverySecretOverride?: string;
    iCloudRecordNameOverride?: string;
};
export type WalletRpcRequestDataType = {
    accessToken: string;
    address: string;
    request: RpcRequestType;
};
export type SolanaWalletCreateRequestDataType = {
    accessToken: string;
    /**
     * The user's existing Ethereum embedded wallet address if they have one. This parameter must be passed
     * if the user has an Ethereum embedded wallet, otherwise Solana wallet creation will fail.
     */
    ethereumAddress?: string;
};
export type SolanaWalletConnectRequestDataType = {
    accessToken: string;
    publicKey: string;
};
export type SolanaWalletRecoverRequestDataType = {
    accessToken: string;
    publicKey: string;
};
export type SolanaWalletRpcRequestDataType = {
    accessToken: string;
    publicKey: string;
    request: SolanaRpcRequestType;
};
export type PrivyRequestDataType = IframeReadyRequestDataType | WalletCreateRequestDataType | WalletConnectRequestDataType | WalletRecoverRequestDataType | WalletRpcRequestDataType | SolanaWalletCreateRequestDataType | SolanaWalletRecoverRequestDataType | SolanaWalletConnectRequestDataType | SolanaWalletRpcRequestDataType;
export type PrivyErrorResponseDataType = {
    error: Error;
};
export type IframeReadyResponseDataType = Record<string, never>;
export type WalletCreateResponseDataType = {
    address: string;
};
export type WalletConnectResponseDataType = {
    address: string;
};
export type WalletRecoverResponseDataType = {
    address: string;
};
export type WalletSetRecoveryResponseDataType = {
    address: string;
};
export type WalletRpcResponseDataType = {
    address: string;
    response: RpcResponseType;
};
export type SolanaWalletCreateResponseDataType = {
    publicKey: string;
};
export type SolanaWalletConnectResponseDataType = {
    publicKey: string;
};
export type SolanaWalletRecoverResponseDataType = {
    publicKey: string;
};
export type SolanaWalletSetRecoveryPasswordResponseDataType = {
    publicKey: string;
};
export type SolanaWalletRpcResponseDataType = {
    publicKey: string;
    response: SolanaRpcResponseType;
};
export type PrivyResponseDataType = IframeReadyResponseDataType | WalletCreateResponseDataType | WalletConnectResponseDataType | WalletRecoverResponseDataType | WalletSetRecoveryResponseDataType | WalletRpcResponseDataType | SolanaWalletCreateResponseDataType | SolanaWalletConnectResponseDataType | SolanaWalletRecoverResponseDataType | SolanaWalletRpcResponseDataType;
export declare const PrivyIframeErrorTypes: readonly ["error", "invalid_request_arguments", "wallet_not_on_device", "invalid_recovery_pin", "insufficient_funds"];
export type PrivyIframeErrorTypesType = (typeof PrivyIframeErrorTypes)[number];
interface PrivyResponseBaseEventType {
    id: string;
    event: PrivyEventType;
}
export interface PrivyErrorResponseEventType extends PrivyResponseBaseEventType {
    error: {
        type: PrivyIframeErrorTypesType;
        message: string;
    };
}
interface IframeReadyResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:iframe:ready';
    data: IframeReadyResponseDataType;
}
interface WalletCreateResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:wallet:create';
    data: WalletCreateResponseDataType;
}
interface WalletConnectResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:wallet:connect';
    data: WalletConnectResponseDataType;
}
interface WalletRecoverResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:wallet:recover';
    data: WalletRecoverResponseDataType;
}
interface WalletSetRecoveryResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:wallet:set-recovery';
    data: WalletSetRecoveryResponseDataType;
}
interface WalletRpcResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:wallet:rpc';
    data: WalletRpcResponseDataType;
}
interface SolanaWalletCreateResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:solana-wallet:create';
    data: SolanaWalletCreateResponseDataType;
}
interface SolanaWalletConnectResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:solana-wallet:connect';
    data: SolanaWalletConnectResponseDataType;
}
interface SolanaWalletRecoverResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:solana-wallet:recover';
    data: SolanaWalletRecoverResponseDataType;
}
interface SolanaWalletRpcResponseEventType extends PrivyResponseBaseEventType {
    event: 'privy:solana-wallet:rpc';
    data: SolanaWalletRpcResponseDataType;
}
export type PrivyResponseEvent = IframeReadyResponseEventType | PrivyErrorResponseEventType | WalletCreateResponseEventType | WalletConnectResponseEventType | WalletRecoverResponseEventType | WalletSetRecoveryResponseEventType | WalletRpcResponseEventType | SolanaWalletCreateResponseEventType | SolanaWalletConnectResponseEventType | SolanaWalletRecoverResponseEventType | SolanaWalletRpcResponseEventType;
export type IframeReadyResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: IframeReadyResponseDataType) => void;
};
export type WalletCreateResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: WalletCreateResponseDataType) => void;
};
export type WalletConnectResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: WalletConnectResponseDataType) => void;
};
export type WalletRecoverResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: WalletRecoverResponseDataType) => void;
};
export type WalletSetRecoveryResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: WalletSetRecoveryResponseDataType) => void;
};
export type WalletRpcResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: WalletRpcResponseDataType) => void;
};
export type SolanaWalletCreateResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: SolanaWalletCreateResponseDataType) => void;
};
export type SolanaWalletConnectResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: SolanaWalletConnectResponseDataType) => void;
};
export type SolanaWalletRecoverResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: SolanaWalletRecoverResponseDataType) => void;
};
export type SolanaWalletRpcResponseCallbacksType = {
    reject: (error: Error) => void;
    resolve: (res: SolanaWalletRpcResponseDataType) => void;
};
export type PrivyResponseCallbacksType = IframeReadyResponseCallbacksType | WalletCreateResponseCallbacksType | WalletConnectResponseCallbacksType | WalletRecoverResponseCallbacksType | WalletSetRecoveryResponseCallbacksType | WalletRpcResponseCallbacksType | SolanaWalletCreateResponseCallbacksType | SolanaWalletConnectResponseCallbacksType | SolanaWalletRecoverResponseCallbacksType | SolanaWalletRpcResponseCallbacksType;
export interface EmbeddedWalletProxy {
    create: (data: WalletCreateRequestDataType) => Promise<WalletCreateResponseDataType>;
    connect: (data: WalletConnectRequestDataType) => Promise<WalletConnectResponseDataType>;
    recover: (data: WalletRecoverRequestDataType) => Promise<WalletRecoverResponseDataType>;
    rpc: (data: WalletRpcRequestDataType) => Promise<WalletRpcResponseDataType>;
    createSolana: (data: WalletCreateRequestDataType) => Promise<SolanaWalletCreateResponseDataType>;
    connectSolana: (data: WalletConnectRequestDataType) => Promise<SolanaWalletConnectResponseDataType>;
    recoverSolana: (data: WalletRecoverRequestDataType) => Promise<SolanaWalletRecoverResponseDataType>;
    rpcSolana: (data: WalletRpcRequestDataType) => Promise<SolanaWalletRpcResponseDataType>;
}
export type EmbeddedWalletMessagePoster = {
    postMessage: (message: any, targetOrigin: string, transfer?: Transferable) => void;
};
export type PreparedTransactionRequestEIP1559 = UnsignedTransactionRequest & {
    from: string;
    to: string;
    nonce: Quantity;
    chainId: number;
    gasLimit: Quantity;
    type: 2;
    maxFeePerGas: Quantity;
};
export type PreparedTransactionRequestLegacy = UnsignedTransactionRequest & {
    from: string;
    to: string;
    nonce: Quantity;
    chainId: number;
    gasLimit: Quantity;
    type: 0 | 1;
    gasPrice: Quantity;
};
export type PreparedTransactionRequest = PreparedTransactionRequestEIP1559 | PreparedTransactionRequestLegacy;
export {};
