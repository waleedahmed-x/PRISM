import { BigNumber } from '@ethersproject/bignumber';
import type { StaticJsonRpcProvider } from '@ethersproject/providers';
import type { Quantity, UnsignedTransactionRequestWithChainId } from '../types';
/**
 * Defaults the gas parameters for a "generic chain" that we do not have special handling for. This is anything
 * not in the Polygon, OP Stack, Arbitrum, or BSC families of chains.
 *
 * Pre-condition: `from`, `to`, `nonce`, and `gasLimit` are already set
 *
 * Post-conditions:
 * - An undefined `type` gets defaulted to 2.
 * - If the tx type is 2, we will default `maxFeePerGas` and `maxPriorityFeePerGas`.
 * - If the tx type is 0, 1, we will default `gasPrice`.
 *
 * @param txRequest {UnsignedTransactionRequestWithChainId}
 * @param provider {StaticJsonRpcProvider}
 * @returns UnsignedTransactionRequestWithChainId with gas fees defaulted
 */
export declare const defaultGasForEvmChain: (txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider) => Promise<UnsignedTransactionRequestWithChainId>;
/**
 * Calculate the total estimated gas cost from the transaction request. This method assumes
 * the transaction has already been processed by Privy's `populateTransactionRequest` and that
 * both a `gasLimit` and one of the `gasPrice` or `maxFeePerGas` have been set.
 *
 * If the transaction is on an OP Stack chain, this method will include the L1 execution fee in the returned
 * `totalGasEstimate` and will also return the execution fee as a separate `l1ExecutionFeeEstimate`. For
 * non-OP Stack chains, the `l1ExecutionFeeEstimate` will be 0.
 *
 * @param txRequest {UnsignedTransactionRequest} the transaction request for which to total estimated gas for
 * @param provider {StaticJsonRpcProvider} ethers provider
 * @returns the `totalGasEstimate` and `l1ExecutionFeeEstimate`
 */
export declare function calculateTotalGasEstimate(txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider): Promise<{
    totalGasEstimate: BigNumber;
    l1ExecutionFeeEstimate: BigNumber;
}>;
/**
 * Defaults the `gasLimit` for the transaction if not already set by calling the
 * `eth_estimateGas` RPC for the network.
 *
 * @param txRequest {UnsignedTransactionRequestWithChainId}
 * @param provider {StaticJsonRpcProvider}
 * @returns `gasLimit` in gas units as a hexstring `Quantity`
 */
export declare function defaultGasLimit(txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider): Promise<Quantity>;
