import { StaticJsonRpcProvider } from '@ethersproject/providers';
import type { Chain, RpcConfig } from '../../chains';
import type { EmbeddedWalletRecoveryOptions, PreparedTransactionRequest, UnsignedTransactionRequest, UnsignedTransactionRequestWithChainId, IEmbeddedWalletRecoveryOptions } from '../types';
/**
 * Build a JSON RPC provider for a given chainId if it is one of our
 * supported chains.
 */
export declare const getJsonRpcProvider: (chainId: number, chains: Chain[], rpcConfig: RpcConfig, options: {
    appId: string;
}) => StaticJsonRpcProvider;
export declare function validateTransactionRequest(txRequest: UnsignedTransactionRequest): void;
/**
 * This method takes the `UnsignedTransactionRequestWithChainId` provided by the app
 * and ensures that the following parameters are set, or at least defaulted by Privy;
 * `from`, `chainId`, `nonce`, `gasLimit`, `type`, `gasPrice` OR `maxFeePerGas`.
 * These values must be set before sending the transaction to the network.
 *
 * This method will NOT throw an error if the user does not have sufficient funds
 * to cover gas costs - that must be explicitly checked elsewhere with `getAndCheckBalance`.
 *
 * @param address {string} wallet address sending the transaction
 * @param txRequest {UnsignedTransactionRequestWithChainId} the transaction request from the app
 * @param provider {StaticJsonRpcProvider} a provider connected to the chain of the transaction
 * @returns {UnsignedTransactionRequestWithChainId} the transaction request with the necessary defaults set
 */
export declare function populateTransactionRequest(address: string, txRequest: UnsignedTransactionRequestWithChainId, provider: StaticJsonRpcProvider): Promise<PreparedTransactionRequest>;
/**
 * Ensure that the recovery upgrade path is valid.
 *
 * @param currentRecoveryType The existing wallet's recovery type
 * @param upgradeToRecoveryType The desired recovery type
 */
export declare function throwIfInvalidRecoveryUpgradePath({ currentRecoveryMethod, upgradeToRecoveryMethod, }: {
    currentRecoveryMethod: EmbeddedWalletRecoveryOptions;
    upgradeToRecoveryMethod: IEmbeddedWalletRecoveryOptions;
}): boolean;
