/** This module is a port of the PKCE implementation in react-auth */
import type { CryptoFns } from './crypto/types';
export declare const STATE_CODE_KEY = "privy:state_code";
export declare const CODE_VERIFIER_KEY = "privy:code_verifier";
/** Web compatible method to create a hash buffer, using SHA256 */
export declare function createHashBuffer(message: string, digest: NonNullable<CryptoFns['digest']>): Promise<Uint8Array>;
export declare function randomBytes(size: number): Uint8Array;
/**
 * Create a cryptographic random string to be used as the code_verifier in PKCE.
 *
 * @returns a cryptographic random string to be used as a code_verifier in PKCE
 */
export declare function createCodeVerifier(): string;
/**
 * Create a state code to be used in the OAuth flow.  State code can be a random set of characers,
 * or optionally can be used to store state information.  In either case, it is used by the client to verify
 * that it is communicating with the same server throughout the auth process.
 *
 * This same implementation also exists in the backend crypto module.
 *
 * @returns a valid state code to be used in PKCE flow
 */
export declare function createStateCode(): string;
/**
 * Derive the code_challenge from the code verifier, using the specified method.
 *
 * @param codeVerifier the code_challenge derived from the provided code verifier
 */
export declare function deriveCodeChallengeFromCodeVerifier({ codeVerifier, method, digest, }: {
    codeVerifier: string;
    method?: string;
    digest?: CryptoFns['digest'];
}): Promise<string>;
