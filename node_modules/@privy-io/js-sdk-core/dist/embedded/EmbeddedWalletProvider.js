import t from"eventemitter3";import{PrivyClientError as e}from"../Error.js";import{EmbeddedProviderError as r}from"./errors.js";import{isSupportedIframeRpcMethod as s}from"./methods.js";import{getJsonRpcProvider as a,populateTransactionRequest as i}from"./utils/index.js";import"./types.js";import"@ethersproject/abstract-signer";import"@ethersproject/providers";import"./gas/arbitrum.js";import"@ethersproject/bignumber";import"../chains/arbitrum.js";import"../chains/arbitrumGoerli.js";import"../chains/arbitrumSepolia.js";import"./utils/ethers.js";import"./gas/bsc.js";import"./gas/op-stack.js";import"@ethersproject/contracts";import"@ethersproject/transactions";import"../chains/base.js";import"../chains/baseGoerli.js";import"../chains/baseSepolia.js";import"../chains/optimism.js";import"../chains/optimismGoerli.js";import"../chains/optimismSepolia.js";import"../chains/zora.js";import"../chains/zoraSepolia.js";import"../chains/zoraTestnet.js";import"./gas/polygon.js";import"@ethersproject/units";import"fetch-retry";import"../chains/polygon.js";import"../chains/polygonAmoy.js";import"../chains/polygonMumbai.js";import"./utils/gas.js";class n extends t{_walletProxy;_privyInternal;_address;_chainId;_chains;_jsonRpcProvider;constructor({walletProxy:t,privyInternal:e,address:r,chains:s,chainId:i=s[0].id}){super(),this._walletProxy=t,this._privyInternal=e,this._address=r,this._chainId=i,this._chains=s,this._jsonRpcProvider=a(i,s,{rpcUrls:[]},{appId:this._privyInternal.appId})}async request(t){if(s(t.method))return this.handleIFrameRpc(t);switch(t.method){case"eth_accounts":case"eth_requestAccounts":return this._address?[this._address]:[];case"eth_chainId":return`0x${this._chainId.toString(16)}`;case"wallet_switchEthereumChain":return this.handleSwitchEthereumChain(t);case"eth_estimateGas":return this.handleEstimateGas(t);case"eth_sendTransaction":{const e=t.params?.[0];return this.handleSendTransaction(e)}case"eth_populateTransactionRequest":{const e=t.params?.[0];return this.handlePopulateTransaction(e)}default:return this.handleJsonRpc(t)}}ensureChainId(t){const e={chainId:this._chainId,...t};return this.internalSwitchEthereumChain(e.chainId),e}internalSwitchEthereumChain(t){t&&Number(t)!==this._chainId&&(this._chainId=Number(t),this._jsonRpcProvider=a(this._chainId,this._chains,{rpcUrls:[]},{appId:this._privyInternal.appId}),this.emit("chainChanged",t))}async handlePopulateTransaction(t){const e=this.ensureChainId(t);return i(this._address,e,this._jsonRpcProvider)}async handleSendTransaction(t){const e=this.ensureChainId(t),r=await i(this._address,e,this._jsonRpcProvider),s=await this.handleIFrameRpc({method:"eth_signTransaction",params:[r]});return await this.handleJsonRpc({method:"eth_sendRawTransaction",params:[s]})}async handleEstimateGas(t){if(!t.params||!Array.isArray(t.params))throw new Error("Invalid params for eth_estimateGas");delete t.params[0].gasPrice,delete t.params[0].maxFeePerGas,delete t.params[0].maxPriorityFeePerGas;const e={...t.params[0],chainId:`0x${this._chainId.toString(16)}`};this.internalSwitchEthereumChain(e.chainId);try{return await this._jsonRpcProvider.send("eth_estimateGas",[e])}catch(t){console.warn(`Gas estimation failed with error: ${t}. Retrying gas estimation by omitting the 'from' address`);try{return delete e.from,await this._jsonRpcProvider.send("eth_estimateGas",[e])}catch(e){throw console.warn(`Gas estimation failed with error: ${e} when omitting the 'from' address`),t}}}handleSwitchEthereumChain(t){if(!t.params||!Array.isArray(t.params))throw new r(`Invalid params for ${t.method}`,4200);let e;if("string"==typeof t.params[0])e=t.params[0];else{if(!("chainId"in t.params[0])||"string"!=typeof t.params[0].chainId)throw new r(`Invalid params for ${t.method}`,4200);e=t.params[0].chainId}this.internalSwitchEthereumChain(e)}async handleIFrameRpc(t){try{const e=await this._privyInternal.getAccessToken();if(!e)throw new Error("Missing privy token. User must be logged in");this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_started",{method:t.method,address:this._address});const r=await this._walletProxy.rpc({request:t,address:this._address,accessToken:e});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_completed",{method:t.method,address:this._address}),r.response.data}catch(r){console.error(r);const s=r instanceof Error?r.message:"Unable to make wallet request";throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_failed",{method:t.method,address:this._address,error:s}),new e({code:"embedded_wallet_request_error",error:s})}}async handleJsonRpc(t){return this._jsonRpcProvider.send(t.method,t.params??[])}toJSON(){return`PrivyEIP1193Provider { address: '${this._address}', chainId: ${this._chainId}, request: [Function] }`}}export{n as EmbeddedWalletProvider};
//# sourceMappingURL=EmbeddedWalletProvider.js.map
