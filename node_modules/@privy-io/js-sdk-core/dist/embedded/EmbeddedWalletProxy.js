import{EventCallbacksQueue as e}from"./EventCallbackQueue.js";import{PrivyIframeError as r}from"./errors.js";import"./types.js";const t=15e3;function s(e){return void 0!==e.error}const a=(o=0,()=>"id-"+o++);var o;const i=(e,r)=>"bigint"==typeof r?r.toString():r,n=e=>new Promise((r=>{setTimeout(r,e)})),c=(e,{ms:r,msg:s})=>Promise.race([e,new Promise(((e,a)=>{setTimeout((()=>{a(new Error(s))}),r??t)}))]),d=new e;class l{ready;cache;_embeddedWalletMessagePoster;constructor(e){this.ready=!1,this.cache=new Map,this._embeddedWalletMessagePoster=e}ping(e=15e3){return c(this.invoke("privy:iframe:ready",{},this._embeddedWalletMessagePoster),{msg:"Ping reached timeout",ms:e})}create(e){return c(this.waitForReady().then((()=>this.invoke("privy:wallet:create",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: create"})}connect(e){return c(this.waitForReady().then((()=>this.invoke("privy:wallet:connect",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: connect"})}recover(e){return c(this.waitForReady().then((()=>this.invoke("privy:wallet:recover",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: recover",ms:6e4})}setRecovery(e){return c(this.waitForReady().then((()=>this.invoke("privy:wallet:set-recovery",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: setRecovery",ms:6e4})}rpc(e){return c(this.waitForReady().then((()=>this.invoke("privy:wallet:rpc",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: rpc"})}createSolana(e){return c(this.waitForReady().then((()=>this.invoke("privy:solana-wallet:create",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: create"})}connectSolana(e){return c(this.waitForReady().then((()=>this.invoke("privy:solana-wallet:connect",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: connect"})}recoverSolana(e){return c(this.waitForReady().then((()=>this.invoke("privy:solana-wallet:recover",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: recover",ms:6e4})}solanaRpc(e){return c(this.waitForReady().then((()=>this.invoke("privy:solana-wallet:rpc",e,this._embeddedWalletMessagePoster))),{msg:"Operation reached timeout: rpc"})}handleEmbeddedWalletMessages(e){switch(e.event){case"privy:iframe:ready":const t=d.dequeue(e.event,e.id);return s(e)?t.reject(new r(e.error.type,e.error.message)):t.resolve(e.data);case"privy:wallet:create":const a=d.dequeue(e.event,e.id);return s(e)?a.reject(new r(e.error.type,e.error.message)):a.resolve(e.data);case"privy:wallet:connect":const o=d.dequeue(e.event,e.id);return s(e)?o.reject(new r(e.error.type,e.error.message)):o.resolve(e.data);case"privy:wallet:recover":const i=d.dequeue(e.event,e.id);return s(e)?i.reject(new r(e.error.type,e.error.message)):i.resolve(e.data);case"privy:wallet:rpc":const n=d.dequeue(e.event,e.id);return s(e)?n.reject(new r(e.error.type,e.error.message)):n.resolve(e.data);case"privy:wallet:set-recovery":const c=d.dequeue(e.event,e.id);return s(e)?c.reject(new r(e.error.type,e.error.message)):c.resolve(e.data);case"privy:solana-wallet:create":const l=d.dequeue(e.event,e.id);return s(e)?l.reject(new r(e.error.type,e.error.message)):l.resolve(e.data);case"privy:solana-wallet:connect":const v=d.dequeue(e.event,e.id);return s(e)?v.reject(new r(e.error.type,e.error.message)):v.resolve(e.data);case"privy:solana-wallet:recover":const h=d.dequeue(e.event,e.id);return s(e)?h.reject(new r(e.error.type,e.error.message)):h.resolve(e.data);case"privy:solana-wallet:rpc":const m=d.dequeue(e.event,e.id);return s(e)?m.reject(new r(e.error.type,e.error.message)):m.resolve(e.data)}}waitForReady(){return this.ready?Promise.resolve():new Promise((async(e,r)=>{for(;!this.ready;)this.invoke("privy:iframe:ready",{},this._embeddedWalletMessagePoster).then((()=>{this.ready=!0,e()})).catch(r),await n(150)}))}invoke(e,r,t){const s=((e,r)=>`${e}${JSON.stringify(r,i)}`)(e,r);if("privy:wallet:create"===e||"privy:solana-wallet:create"===e){const e=this.cache.get(s);if(e)return e}const o=new Promise(((s,o)=>{const i=a();d.enqueue(i,{resolve:s,reject:o}),t.postMessage(JSON.stringify({id:i,event:e,data:r}),"*")})).finally((()=>{this.cache.delete(s)}));return this.cache.set(s,o),o}}export{t as DEFAULT_WALLET_PROXY_TIMEOUT_MS,l as EmbeddedWalletProxy};
//# sourceMappingURL=EmbeddedWalletProxy.js.map
