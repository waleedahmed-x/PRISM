import{BigNumber as r}from"@ethersproject/bignumber";import{arbitrum as i}from"../../chains/arbitrum.js";import{arbitrumGoerli as t}from"../../chains/arbitrumGoerli.js";import{arbitrumSepolia as e}from"../../chains/arbitrumSepolia.js";import{convertBigNumberish as a}from"../utils/ethers.js";const o=r=>[i.id,t.id,e.id].includes(r),s=async(i,t)=>{if(!o(i.chainId))throw new Error("Invalid chain ID for Arbitrum gas estimation.");if(void 0===i.type&&(i.type=2),i.maxFeePerGas)return i;try{const{lastBaseFeePerGas:e}=await t.getFeeData();if(e){const t=e.mul(r.from(120)).div(r.from(100));i.maxFeePerGas=a(t),i.maxPriorityFeePerGas=a(r.from(0))}}catch(r){throw new Error(`Failed to set gas price for Arbitrum transaction: ${r}.`)}return i};export{s as defaultGasForArbitrum,o as isArbitrum};
//# sourceMappingURL=arbitrum.js.map
