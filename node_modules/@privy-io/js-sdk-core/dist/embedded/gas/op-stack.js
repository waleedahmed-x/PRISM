import{BigNumber as e}from"@ethersproject/bignumber";import{Contract as r}from"@ethersproject/contracts";import{serialize as a}from"@ethersproject/transactions";import{base as i}from"../../chains/base.js";import{baseGoerli as t}from"../../chains/baseGoerli.js";import{baseSepolia as o}from"../../chains/baseSepolia.js";import{optimism as s}from"../../chains/optimism.js";import{optimismGoerli as n}from"../../chains/optimismGoerli.js";import{optimismSepolia as m}from"../../chains/optimismSepolia.js";import{zora as c}from"../../chains/zora.js";import{zoraSepolia as P}from"../../chains/zoraSepolia.js";import{zoraTestnet as f}from"../../chains/zoraTestnet.js";import{convertBigNumberish as h,toEthersUnsignedTransaction as d}from"../utils/ethers.js";const l=81457,p=168587773,F="0x420000000000000000000000000000000000000F",x=["function getL1Fee(bytes memory _data) external view returns (uint256)"],G=e=>[i.id,t.id,o.id,s.id,n.id,m.id,c.id,f.id,P.id,l,p].includes(e),u=async(r,a)=>{if(!G(r.chainId))throw new Error("Invalid chain ID for OP Stack gas estimation.");if(void 0===r.type&&(r.type=2),r.gasPrice&&(console.warn("`gasPrice` is not supported on this chain and will be ignored. Use `maxPriorityFeePerGas` and/or `maxFeePerGas` instead."),delete r.gasPrice),r.maxPriorityFeePerGas&&r.maxFeePerGas)return r;try{if(!r.maxPriorityFeePerGas){const e=await a.send("eth_maxPriorityFeePerGas",[]);r.maxPriorityFeePerGas=e}if(r.maxFeePerGas&&(console.warn("maxFeePerGas is specified without maxPriorityFeePerGas - this can result in hung transactions."),r.maxPriorityFeePerGas>=r.maxFeePerGas))throw new Error("Overridden maxFeePerGas is less than or equal to the calculated maxPriorityFeePerGas. Please set both values or maxPriorityFeePerGas alone for correct gas estimation.");if(!r.maxFeePerGas){const{lastBaseFeePerGas:i}=await a.getFeeData();if(!i)throw new Error("Unable to fetch baseFee for last block.");const t=e.from(i),o=t.mul(e.from(126)).div(e.from(100)).add(e.from(r.maxPriorityFeePerGas));r.maxFeePerGas=h(o)}}catch(e){throw new Error(`Failed to set gas price for OP stack transaction: ${e}.`)}return r};async function y(i,t){if(!i.chainId||i.chainId&&!G(i.chainId))return e.from(0);let o=e.from(0);try{const e=new r(F,x,t),s=d(i),n=a(s);o=await e.getL1Fee(n)}catch(e){}return o}export{x as OPTIMISM_STACK_GAS_PRICE_ORACLE_ABI,F as OPTIMISM_STACK_GAS_PRICE_ORACLE_ADDRESS,u as defaultGasForOpStack,y as estimateOpStackL1Gas,G as isOpStack};
//# sourceMappingURL=op-stack.js.map
