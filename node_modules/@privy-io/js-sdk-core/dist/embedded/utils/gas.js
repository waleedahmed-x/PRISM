import{BigNumber as t}from"@ethersproject/bignumber";import{PrivyProviderRpcError as e}from"../errors.js";import{isOpStack as i,estimateOpStackL1Gas as r}from"../gas/op-stack.js";import{QuantityToBigNumber as a}from"./ethers.js";import"../types.js";import"@ethersproject/contracts";import"@ethersproject/transactions";import"../../chains/base.js";import"../../chains/baseGoerli.js";import"../../chains/baseSepolia.js";import"../../chains/optimism.js";import"../../chains/optimismGoerli.js";import"../../chains/optimismSepolia.js";import"../../chains/zora.js";import"../../chains/zoraSepolia.js";import"../../chains/zoraTestnet.js";const s=async(t,e)=>{if(void 0===t.type&&(t.type=2),2===t.type){if(!t.maxFeePerGas||!t.maxPriorityFeePerGas){const i=await e.getFeeData();t.maxFeePerGas||(t.maxFeePerGas=i.maxFeePerGas?.toHexString()),t.maxPriorityFeePerGas||(t.maxPriorityFeePerGas=i.maxPriorityFeePerGas?.toHexString())}}else if(!t.gasPrice){const i=await e.getFeeData();t.gasPrice=i.gasPrice?.toHexString()}return t};async function o(s,o){if(!s.gasLimit)throw new e("gasLimit was not successfully set for transaction.");const n=a(s.gasLimit);let m=t.from(0);if(2==s.type){if(!s.maxFeePerGas)throw new e("maxFeePerGas was not successfully set for transaction of type 2.");m=a(s.maxFeePerGas)}else{if(!s.gasPrice)throw new e("gasPrice was not successfully set for transaction of type 0 or 1.");m=a(s.gasPrice)}let c=n.mul(m),p=t.from(0);if(s.chainId&&i(s.chainId))try{p=await r(s,o),c=c.add(p)}catch(t){}return{totalGasEstimate:c,l1ExecutionFeeEstimate:p}}async function n(t,e){try{return(await e.estimateGas(t)).toHexString()}catch(i){let r;if("message"in i&&i.message.includes("insufficient funds")&&(console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'value'`),r=await async function({txRequest:t,provider:e}){try{const i={...t,value:void 0};return(await e.estimateGas(i)).toHexString()}catch(t){return console.warn(`Gas estimation failed with error: ${t} when omitting the 'value'`),null}}({txRequest:t,provider:e})),r||(console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'from'`),r=await async function({txRequest:t,provider:e}){try{const i={...t,from:void 0};return(await e.estimateGas(i)).toHexString()}catch(t){return console.warn(`Gas estimation failed with error: ${t} when omitting the 'from' address`),null}}({txRequest:t,provider:e})),!r)throw i;return r}}export{o as calculateTotalGasEstimate,s as defaultGasForEvmChain,n as defaultGasLimit};
//# sourceMappingURL=gas.js.map
