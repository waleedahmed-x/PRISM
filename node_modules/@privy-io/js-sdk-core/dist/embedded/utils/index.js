import{VoidSigner as r}from"@ethersproject/abstract-signer";import{StaticJsonRpcProvider as t}from"@ethersproject/providers";import{PrivyConnectorError as e}from"../errors.js";import{isArbitrum as i,defaultGasForArbitrum as o}from"../gas/arbitrum.js";import{isBsc as s,defaultGasForBsc as a}from"../gas/bsc.js";import{isOpStack as n,defaultGasForOpStack as p}from"../gas/op-stack.js";import{isPolygon as c,defaultGasForPolygon as m}from"../gas/polygon.js";import{defaultGasLimit as h,defaultGasForEvmChain as u}from"./gas.js";import"../types.js";import"@ethersproject/bignumber";import"../../chains/arbitrum.js";import"../../chains/arbitrumGoerli.js";import"../../chains/arbitrumSepolia.js";import"./ethers.js";import"@ethersproject/contracts";import"@ethersproject/transactions";import"../../chains/base.js";import"../../chains/baseGoerli.js";import"../../chains/baseSepolia.js";import"../../chains/optimism.js";import"../../chains/optimismGoerli.js";import"../../chains/optimismSepolia.js";import"../../chains/zora.js";import"../../chains/zoraSepolia.js";import"../../chains/zoraTestnet.js";import"@ethersproject/units";import"fetch-retry";import"../../chains/polygon.js";import"../../chains/polygonAmoy.js";import"../../chains/polygonMumbai.js";const l=(r,i,o,s)=>{const a=Number(r),n=i.find((r=>r.id===a));if(!n)throw new e(`Unsupported chainId ${r}`,4901);let p;if(p=n.rpcUrls.privyWalletOverride&&n.rpcUrls.privyWalletOverride.http[0]?new t(n.rpcUrls.privyWalletOverride.http[0]):o.rpcUrls&&o.rpcUrls[a]?new t(o.rpcUrls[a]):n.rpcUrls.privy?.http[0]?new t({url:n.rpcUrls.privy.http[0],headers:{"privy-app-id":s.appId}}):n.rpcUrls.public?.http[0]?new t(n.rpcUrls.public?.http[0]):new t(n.rpcUrls.default?.http[0]),!p)throw new e(`No RPC url found for ${r}`);return p};function d(r){return/^-?0x[a-f0-9]+$/i.test(r)}function f(r){const t="number"==typeof r,e="bigint"==typeof r,i="string"==typeof r&&d(r);return t||e||i}function y(r){const t=["gasLimit","gasPrice","value","maxPriorityFeePerGas","maxFeePerGas"];for(const e of t){const t=r[e];if(void 0!==t&&!f(t))throw new Error(`Transaction request property '${e}' must be a valid number, bigint, or hex string representing a quantity`)}if("number"!=typeof r.chainId)throw new Error("Transaction request property 'chainId' must be a number")}async function g(t,e,l){if(e.chainId=Number(e.chainId),y(e),e.from||(e.from=t),!e.nonce){const i=new r(t,l);e.nonce=await i.getTransactionCount("pending")}return e.gasLimit||(e.gas?(e.gasLimit=e.gas,delete e.gas):e.gasLimit=await h(e,l)),"string"==typeof e.type&&d(e.type)&&(e.type=Number(e.type)),[23294,23295].includes(e.chainId)&&(e.type=0),0===(e=c(e.chainId)?await m(e):i(e.chainId)?await o(e,l):n(e.chainId)?await p(e,l):s(e.chainId)?await a(e,l):await u(e,l)).type&&delete e.accessList,2!==e.type&&(delete e.maxPriorityFeePerGas,delete e.maxFeePerGas),e}function j({currentRecoveryMethod:r,upgradeToRecoveryMethod:t}){switch(r){case"privy":case"user-passcode":return!0;case"icloud":case"google-drive":if(r===t)throw new Error("Cannot upgrade to the existing cloud platform");return!0;default:throw new Error("Unknown recovery method")}}export{l as getJsonRpcProvider,g as populateTransactionRequest,j as throwIfInvalidRecoveryUpgradePath,y as validateTransactionRequest};
//# sourceMappingURL=index.js.map
