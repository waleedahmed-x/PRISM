LOOTBOX FUNCTIONS ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
  async function getShards() {
    const sessionToken = await SecureStore.getItemAsync("session-token");
    console.log("sessionToken: ", sessionToken);
    const token = await getAccessToken();
    console.log("token: ", token);

    try {
      const response = await axios.get(
        `http://localhost:8080/api/lootbox/shards?page=1&limit=5000`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "x-prism-session": sessionToken,
          },
        }
      );

      console.log("✅ Response:", response.data);
    } catch (error: any) {
      console.error("❌ Error:", error.response?.data || error.message);
    }
  }
  async function convertToShards() {
    const sessionToken = await SecureStore.getItemAsync("session-token");
    console.log("sessionToken: ", sessionToken);
    const token = await getAccessToken();
    console.log("token: ", token);

    try {
      const response = await axios.post(
        "http://localhost:8080/api/lootbox/convert-to-commonshards",
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "x-prism-session": sessionToken,
          },
        }
      );

      console.log("✅ Response:", response.data);
    } catch (error: any) {
      console.error("❌ Error:", error.response?.data || error.message);
    }
  }
  async function getPowerpoints() {
    const sessionToken = await SecureStore.getItemAsync("session-token");
    console.log("sessionToken: ", sessionToken);
    const token = await getAccessToken();
    console.log("token: ", token);

    try {
      const response = await axios.get(
        "http://localhost:8080/api/lootbox/get-powerpoints?page=1&limit=5000",
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "x-prism-session": sessionToken,
          },
        }
      );
      const total = response?.data?.data
        .filter((item) => item.userIdentifier === account?.address)
        .reduce((sum, item) => sum + parseFloat(item.amount), 0);
      console.log("Total Points:", total);
    } catch (error: any) {
      console.error("❌ Error:", error.response?.data || error.message);
    }
  }
  async function getLinkedPowerpoints() {
    const sessionToken = await SecureStore.getItemAsync("session-token");
    console.log("sessionToken: ", sessionToken);
    const token = await getAccessToken();
    console.log("token: ", token);

    try {
      const response = await axios.get(
        "http://localhost:8080/api/lootbox/powerpoints-linked",
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "x-prism-session": sessionToken,
          },
        }
      );
      const total = response?.data;
      console.log("Total Points:", total);
    } catch (error: any) {
      console.error("❌ Error:", error.response?.data || error.message);
    }
  }
  async function getStatsByUser() {
    const sessionToken = await SecureStore.getItemAsync("session-token");
    console.log("sessionToken: ", sessionToken);
    const token = await getAccessToken();
    console.log("token: ", token);

    try {
      const response = await axios.get(
        `http://localhost:8080/api/lootbox/stats-by-user`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "x-prism-session": sessionToken,
          },
        }
      );

      console.log("✅ Response:", response.data);
    } catch (error: any) {
      console.error("❌ Error:", error.response?.data || error.message);
    }
  }
  async function earnPowerpoints() {
    const sessionToken = await SecureStore.getItemAsync("session-token");
    console.log("sessionToken: ", sessionToken);
    const token = await getAccessToken();
    // console.log("token: ", token);
    console.log("address: ", account?.address);
    try {
      const response = await axios.post(
        "http://localhost:8080/api/lootbox/earn-powerpoints",
        {
          // userId: user?.id,
          userIdentifier: account?.address,
          providerApp: "PRISM",
          amount: 100,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "x-prism-session": sessionToken.toString(),
          },
        }
      );

      console.log("✅ Response:", response.data);
    } catch (error: any) {
      console.error("❌ Error:", error.response?.data || error.message);
    }
  }
LOOTBOX FUNCTIONS ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅

BUTTONS TO TRIGGER LOOTBOX FUNCTIONS ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅
    {/* <CyanGlowButton
            title={loading ? "Loading..." : "Convert to shards"}
            icon
            disabled={loading}
            event={convertToShards}
            styles={{ marginTop: 15 }}
          />
          <CyanGlowButton
            title={loading ? "Loading..." : "See Stats By User"}
            icon
            disabled={loading}
            event={getStatsByUser}
            styles={{ marginTop: 15 }}
          />
          <CyanGlowButton
            title={loading ? "Loading..." : "See Powerpoints"}
            icon
            disabled={loading}
            event={getPowerpoints}
            styles={{ marginTop: 15 }}
          />
          <CyanGlowButton
            title={loading ? "Loading..." : "See Powerpoints /linked"}
            icon
            disabled={loading}
            event={getLinkedPowerpoints}
            styles={{ marginTop: 15 }}
          /> */}
BUTTONS TO TRIGGER LOOTBOX FUNCTIONS ✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅✅